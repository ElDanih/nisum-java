openapi: 3.0.3
info:
  title: API Registro de Usuarios
  version: "1.0.0"
  description: API RESTful que permite registrar y autenticar usuarios, usando JWT.

servers:
  - url: http://localhost:8080
    description: Localhost

paths:
  /auth/register:
    post:
      summary: Registrar usuario
      description: Registra un nuevo usuario en el sistema.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Error en la firma
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorFirma'
        '409':
          description: Email ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEmail'

  /api/v1/users:
    get:
      summary: Obtener usuarios
      description: Devuelve una lista de usuarios registrados.
      operationId: getUsers
      responses:
        '200':
          description: Lista de usuarios recuperada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor

  /api/v1/inactivate:
    patch:
      summary: Desactivar usuario
      description: Desactiva un usuario por correo electrónico.
      operationId: inactivateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mensaje:
                  type: string
                  example: El correo ya esta registrado
      responses:
        '200':
          description: Usuario desactivado con éxito
          content:
            application/json:
              schema:
                type: string
                example: Usuario desactivado
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: string
                example: No fue posible desactivar el usuario
        '500':
          description: Error interno del servidor

  /actuator/health/liveness:
    get:
      summary: Liveness
      description: Verifica el estado del servicio.
      operationId: liveness
      responses:
        '200':
          description: Servicio activo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'


components:
  schemas:
    UserRequest:
      type: object
      required: [name, email, password, phones]
      properties:
        name:
          type: string
          minLength: 1
          example: Juan Rodriguez
        email:
          type: string
          format: email
          minLength: 8
          pattern: '^[A-Za-z0-9._+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
          example: juan@rodriguez.org
        password:
          type: string
          pattern: '^(?=.*[A-Z])(?=.*[0-9])[A-Za-z\d]{8,}$'
          example: Password1
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'

    Phone:
      type: object
      required: [number, citycode, contrycode]
      properties:
        number:
          type: string
          example: "1234567"
        cityCode:
          type: string
          example: "1"
        contryCode:
          type: string
          example: "57"

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        active:
          type: boolean
          example: true

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          example: Password1

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        username:
          type: string
          example: juan@rodriguez.org
        mensaje:
          type: string
          example: Autenticacion exitosa.

    ErrorResponse:
      type: object
      properties:
        mensaje:
          type: string
          example: Autenticacion fallida

    ErrorFirma:
      type: object
      properties:
        mensaje:
          type: string
          example: Error en la firma

    ErrorEmail:
      type: object
      properties:
        mensaje:
          type: string
          example: El correo ya esta registrado

    LivenessResponse:
      type: object
      properties:
        status:
          type: string
          example: UP

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: Juan Rodríguez
        username:
          type: string
          format: email
          example: juan@rodriguez.org
        password:
          type: string
          example: Password1
        created:
          type: string
          format: date-time
          example: 2025-06-17T10:15:30
        modified:
          type: string
          format: date-time
          example: 2025-07-01T12:00:00
        lastLogin:
          type: string
          format: date-time
          example: 2025-06-20T14:45:15
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        isActive:
          type: boolean
          example: true
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'


